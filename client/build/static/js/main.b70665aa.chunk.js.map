{"version":3,"sources":["env/env.js","DefaultCode.js","App.js","index.js"],"names":["defaultCode","c","cpp","python","java","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","App","useState","myCode","setCode","result","setResult","lang","setlang","loading","setLoading","input","setinput","darkmode","setDarkMode","onSubmitHandler","e","a","preventDefault","window","scrollTo","top","behavior","mystate","code","localStorage","getItem","JSON","parse","axios","post","env","then","res","data","err","error","output","catch","key","cb","callbackRef","useRef","useEffect","current","handle","event","keyCode","shiftKey","ctrlKey","document","addEventListener","removeEventListener","useKey","classes","className","Container","LinearProgress","FormControl","variant","style","color","InputLabel","id","Select","labelId","value","onChange","langu","target","clear","onLangSelectHandler","label","MenuItem","FormControlLabel","control","Switch","checked","name","inputProps","marginLeft","textAlign","Paper","elevation","padding","width","height","language","options","selectOnLineNumbers","renderIndentGuides","colorDecorators","cursorBlinking","autoClosingQuotes","find","autoFindInSelection","snippetSuggestions","newcode","setItem","stringify","editorDidMount","display","CircularProgress","Button","onClick","href","placeholder","type","TextareaAutosize","disabled","minRows","fullwidth","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b70665aa.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  url: \"http://15.207.114.84/api/\",\n};\n","const c = `#include<stdio.h>\n\nint main() {\n    // Your Code will come here\n    return 0;\n}\n`;\nconst cpp = `#include<bits/stdc++.h> \\nusing namespace std;\\n\\nint main() {\\n\\t//Your Code will come here\\n\\treturn 0;\\n}\n`;\n\nconst java = `class test {\n  public static void main(String args[]){\n      // Your Code will come here\n  }\n}\n`;\n\nconst python = `# Your code will come here\n`;\n\nexport const defaultCode = {\n  c,\n  cpp,\n  python,\n  java,\n};\n","import \"./App.css\";\nimport { useState, useEffect, useRef } from \"react\";\nimport MonacoEditor from \"react-monaco-editor\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Switch } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport env from \"./env/env\";\n\nimport * as defaultCode from \"./DefaultCode\";\n\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction useKey(key, cb) {\n  const callbackRef = useRef(cb);\n\n  useEffect(() => {\n    callbackRef.current = cb;\n  });\n\n  useEffect(() => {\n    function handle(event) {\n      if (event.keyCode === 13 && event.shiftKey && event.ctrlKey) {\n        callbackRef.current(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", handle);\n\n    return () => document.removeEventListener(\"keydown\", handle);\n  }, [key]);\n}\n\nfunction App() {\n  const [myCode, setCode] = useState(defaultCode.defaultCode.cpp);\n  const [result, setResult] = useState(\"Submit Code to See Result\");\n  const [lang, setlang] = useState(\"cpp\");\n  const [loading, setLoading] = useState(false);\n  const [input, setinput] = useState(\"\");\n  const [darkmode, setDarkMode] = useState(false);\n\n  // const [theme, setTheme] = useState(\"\");\n\n  const onSubmitHandler = async (e) => {\n    e.preventDefault();\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n    setLoading(true);\n    let mystate = {\n      code:\n        localStorage.getItem(\"code\") != null\n          ? JSON.parse(localStorage.getItem(\"code\"))\n          : myCode,\n      lang:\n        localStorage.getItem(\"lang\") != null\n          ? localStorage.getItem(\"lang\")\n          : lang,\n      input,\n      result,\n    };\n\n    // console.log(mystate);\n\n    axios\n      .post(`${env.url}v1/submit`, mystate)\n      .then((res) => {\n        setLoading(false);\n        const data = res.data;\n        if (data.err) {\n          // Error in user code\n          setResult(data.error);\n        } else {\n          setResult(data.output);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  };\n\n  useKey(\"Enter\", onSubmitHandler);\n\n  const onCodeChangeHandler = (newcode, e) => {\n    localStorage.setItem(\"lang\", lang);\n    localStorage.setItem(\"code\", JSON.stringify(newcode));\n\n    setCode(newcode);\n  };\n  const onInputChangeHandler = (e) => {\n    setinput(e.target.value);\n  };\n\n  const editorDidMount = (e) => {\n    // console.log(\"EDITOR Loaded\");\n  };\n\n  const onLangSelectHandler = (e) => {\n    const langu = e.target.value;\n    localStorage.clear();\n    setlang(langu);\n    setCode(defaultCode.defaultCode[langu]);\n  };\n\n  const handleChange = (event) => {\n    setDarkMode(!darkmode);\n  };\n\n  const options = {\n    selectOnLineNumbers: true,\n    renderIndentGuides: true,\n    colorDecorators: true,\n    cursorBlinking: \"blink\",\n    autoClosingQuotes: \"always\",\n\n    find: {\n      autoFindInSelection: \"always\",\n    },\n    snippetSuggestions: \"always\",\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className={darkmode ? \"fullBodyDark\" : \"fullBody\"}>\n      <Container>\n        {loading ? <LinearProgress /> : <></>}\n\n        <div className=\"row\">\n          <div className=\"column left\">\n            <div className=\"\">\n              <FormControl\n                variant=\"filled\"\n                className={classes.formControl}\n                style={{ color: darkmode ? \"white\" : \"black\" }}\n              >\n                <InputLabel\n                  style={{ color: darkmode ? \"white\" : \"black\" }}\n                  id=\"demo-simple-select-outlined-label\"\n                >\n                  Language\n                </InputLabel>\n                <Select\n                  labelId=\"demo-simple-select-outlined-label\"\n                  id=\"demo-simple-select-outlined\"\n                  value={lang}\n                  style={{ color: darkmode ? \"white\" : \"black\" }}\n                  onChange={(e) => onLangSelectHandler(e)}\n                  label=\"Language\"\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  <MenuItem value={\"cpp\"}>C++</MenuItem>\n                  <MenuItem value={\"c\"}>C</MenuItem>\n                  <MenuItem value={\"java\"}>Java 11</MenuItem>\n                  <MenuItem value={\"python\"}>Python3</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControlLabel\n                control={\n                  <Switch\n                    style={{\n                      color: \"white\",\n                    }}\n                    checked={darkmode}\n                    onChange={handleChange}\n                    color=\"primary\"\n                    name=\"checkedB\"\n                    inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                  />\n                }\n                style={{\n                  marginLeft: \"500px\",\n                  textAlign: \"center\",\n                }}\n                label={darkmode ? \"🌚\" : \"🌞\"}\n              />\n\n              <Paper\n                elevation={3}\n                style={{\n                  padding: \"5px\",\n                }}\n              >\n                <MonacoEditor\n                  width=\"830\"\n                  height=\"500\"\n                  language={\n                    localStorage.getItem(\"lang\") != null\n                      ? localStorage.getItem(\"lang\")\n                      : lang\n                  }\n                  theme={darkmode ? \"vs-dark\" : \"vs-light\"}\n                  value={\n                    localStorage.getItem(\"code\") != null\n                      ? JSON.parse(localStorage.getItem(\"code\"))\n                      : myCode\n                  }\n                  options={options}\n                  onChange={onCodeChangeHandler}\n                  editorDidMount={editorDidMount}\n                />\n              </Paper>\n            </div>\n\n            <div\n              style={{\n                display: \"flex\",\n              }}\n            >\n              <div>\n                {loading ? (\n                  <CircularProgress />\n                ) : (\n                  <>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={onSubmitHandler}\n                      style={{\n                        margin: \"10px\",\n                      }}\n                    >\n                      Run (ctrl + shift + enter) 🏃🏻‍♂️\n                    </Button>\n                    <p>\n                      If the submission doesn't works please try{\" \"}\n                      <Button\n                        color=\"secondary\"\n                        href=\"http://nav-compiler.herokuapp.com/\"\n                      >\n                        here\n                      </Button>\n                    </p>\n                    <p>\n                      Always make sure you are connected to the http version not\n                      the https version 😉 (specially if you use brave browser!)\n                    </p>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div className=\"column right\">\n            <h1>Input: 📝 </h1>\n\n            <div>\n              <textarea\n                placeholder=\"Give Input\"\n                className=\"ui-autocomplete-input\"\n                style={{\n                  width: \"350px\",\n                  height: \"30vh\",\n                }}\n                type=\"text\"\n                value={input}\n                onChange={onInputChangeHandler}\n              ></textarea>\n            </div>\n            <div>\n              <div className=\"row\">\n                <h1 className=\"\">Output: 🧾</h1>\n              </div>\n              <div className=\"\">\n                <TextareaAutosize\n                  style={{\n                    width: \"350px\",\n                    height: \"60vh\",\n                  }}\n                  value={result}\n                  disabled={true}\n                  aria-label=\"minimum height\"\n                  minRows={9}\n                  fullwidth=\"true\"\n                  placeholder=\"Minimum 3 rows\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Container>\n\n      <div className=\"footer\">\n        <p>Made with 💜 By Navneet Kumar Singh</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}