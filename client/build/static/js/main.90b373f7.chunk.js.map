{"version":3,"sources":["env/env.js","DefaultCode.js","App.js","index.js"],"names":["defaultCode","c","cpp","python","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","App","useState","myCode","setCode","result","setResult","lang","setlang","loading","setLoading","input","setinput","onSubmitHandler","e","a","preventDefault","alert","window","scrollTo","top","behavior","mystate","code","localStorage","getItem","JSON","parse","console","log","axios","post","env","then","res","data","err","error","output","catch","classes","Container","LinearProgress","className","style","display","justifyContent","flexDirection","FormControl","variant","InputLabel","id","Select","labelId","value","onChange","langu","target","clear","onLangSelectHandler","label","MenuItem","type","width","height","language","options","selectOnLineNumbers","renderIndentGuides","colorDecorators","cursorBlinking","autoClosingQuotes","find","autoFindInSelection","snippetSuggestions","newcode","setItem","stringify","editorDidMount","CircularProgress","Button","color","onClick","TextareaAutosize","disabled","aria-label","minRows","fullWidth","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRACe,EACR,4BCWMA,EAAc,CACzBC,EAdK,yFAeLC,IARO,iHASPC,OANU,gC,yBCYNC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,YAAa,CACXC,OAAQF,EAAMG,QAAQ,GACtBC,SAAU,KAEZC,YAAa,CACXC,UAAWN,EAAMG,QAAQ,QAyNdI,MArNf,WAAgB,IAAD,EACaC,mBAASd,EAAwBE,KAD9C,mBACNa,EADM,KACEC,EADF,OAEeF,mBAAS,6BAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGWJ,mBAAS,OAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIiBN,oBAAS,GAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,KAOPC,EAAe,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sDACtBD,EAAEE,iBACFC,MAAM,eACNC,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,WAEZX,GAAW,GACPY,EAAU,CACZC,KACkC,MAAhCC,aAAaC,QAAQ,QACjBC,KAAKC,MAAMH,aAAaC,QAAQ,SAChCtB,EACNI,KACkC,MAAhCiB,aAAaC,QAAQ,QACjBD,aAAaC,QAAQ,QACrBlB,EACNI,QACAN,UAGFuB,QAAQC,IAAIP,GAEZQ,IACGC,KADH,UACWC,EADX,aAC+BV,GAC5BW,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,MAChBzB,GAAW,GACX,IAAMyB,EAAOD,EAAIC,KACbA,EAAKC,IAEP9B,EAAU6B,EAAKE,OAEf/B,EAAU6B,EAAKG,WAGlBC,OAAM,SAACH,GACN1B,GAAW,GACXkB,QAAQC,IAAIO,MAtCM,2CAAH,sDA4EfI,EAAUhD,IAEhB,OACE,eAACiD,EAAA,EAAD,WACGhC,EACC,cAACiC,EAAA,EAAD,IAEA,6BAMF,oBAAIC,UAAU,GAAd,yBACA,sBACEA,UAAU,GACVC,MAAO,CACLC,QAAS,OAETC,eAAgB,gBAChBC,cAAe,OANnB,UASE,sBAAKJ,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,eAACK,EAAA,EAAD,CAAaC,QAAQ,WAAWN,UAAWH,EAAQ7C,YAAnD,UACE,cAACuD,EAAA,EAAD,CAAYC,GAAG,oCAAf,sBAGA,eAACC,EAAA,EAAD,CACEC,QAAQ,oCACRF,GAAG,8BACHG,MAAO/C,EACPgD,SAAU,SAACzC,GAAD,OArDI,SAACA,GAC3B,IAAM0C,EAAQ1C,EAAE2C,OAAOH,MACvB9B,aAAakC,QACblD,EAAQgD,GACRpD,EAAQhB,EAAwBoE,IAiDHG,CAAoB7C,IACrC8C,MAAM,WALR,UAOE,cAACC,EAAA,EAAD,CAAUP,MAAM,GAAhB,SACE,wCAEF,cAACO,EAAA,EAAD,CAAUP,MAAO,MAAjB,iBACA,cAACO,EAAA,EAAD,CAAUP,MAAO,IAAjB,eACA,cAACO,EAAA,EAAD,CAAUP,MAAO,SAAjB,2BAWJ,qBAAKQ,KAAK,OAAOX,GAAG,OAAOR,UAAU,cAArC,SACE,cAAC,IAAD,CACEoB,MAAM,MACNC,OAAO,MACPC,SACkC,MAAhCzC,aAAaC,QAAQ,QACjBD,aAAaC,QAAQ,QACrBlB,EAENb,MAAM,UACN4D,MACkC,MAAhC9B,aAAaC,QAAQ,QACjBC,KAAKC,MAAMH,aAAaC,QAAQ,SAChCtB,EAEN+D,QAhFE,CACdC,qBAAqB,EACrBC,oBAAoB,EACpBC,iBAAiB,EACjBC,eAAgB,QAChBC,kBAAmB,SAEnBC,KAAM,CACJC,oBAAqB,UAEvBC,mBAAoB,UAuERnB,SAtGc,SAACoB,EAAS7D,GACpCU,aAAaoD,QAAQ,OAAQrE,GAC7BiB,aAAaoD,QAAQ,OAAQlD,KAAKmD,UAAUF,IAE5CvE,EAAQuE,IAmGIG,eA7FS,SAAChE,GACtBc,QAAQC,IAAI,yBAgGN,sBAAKc,UAAU,GAAf,UACE,mBAAGA,UAAU,oBAAb,2BAEA,0BACEmB,KAAK,OACLX,GAAG,QACHG,MAAO3C,EACP4C,SA5GiB,SAACzC,GAC5BF,EAASE,EAAE2C,OAAOH,aA+GX7C,EACC,cAACsE,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CACE/B,QAAQ,YACRgC,MAAM,UACNC,QAASrE,EAHX,uBAYJ,sBAAK8B,UAAU,GAAf,UACE,yCACA,qBAAKA,UAAU,GAAf,SAWE,cAACwC,EAAA,EAAD,CACEvC,MAAO,CACLmB,MAAO,SAETT,MAAOjD,EACP+E,UAAU,EACVC,aAAW,iBACXC,QAAS,EACTC,WAAS,EACTC,YAAY,+BCxO1BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.90b373f7.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  url: \"http://15.207.114.84/api/\",\n};\n","const c = `#include<stdio.h>\n\nint main() {\n    // Your Code will come here\n    return 0;\n}\n`;\nconst cpp = `#include<bits/stdc++.h> \\nusing namespace std;\\n\\nint main() {\\n\\t//Your Code will come here\\n\\treturn 0;\\n}\n`;\n\nconst python = `# Your code will come here\n`;\n\nexport const defaultCode = {\n  c,\n  cpp,\n  python,\n};\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport MonacoEditor from \"react-monaco-editor\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\nimport TextField from \"@material-ui/core/TextField\";\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport env from \"./env/env\";\n\nimport * as defaultCode from \"./DefaultCode\";\n\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const [myCode, setCode] = useState(defaultCode.defaultCode.cpp);\n  const [result, setResult] = useState(\"Submit Code to See Result\");\n  const [lang, setlang] = useState(\"cpp\");\n  const [loading, setLoading] = useState(false);\n  const [input, setinput] = useState(\"\");\n\n  const onSubmitHandler = async (e) => {\n    e.preventDefault();\n    alert(\"submit code\");\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n    setLoading(true);\n    let mystate = {\n      code:\n        localStorage.getItem(\"code\") != null\n          ? JSON.parse(localStorage.getItem(\"code\"))\n          : myCode,\n      lang:\n        localStorage.getItem(\"lang\") != null\n          ? localStorage.getItem(\"lang\")\n          : lang,\n      input,\n      result,\n    };\n\n    console.log(mystate);\n\n    axios\n      .post(`${env.url}v1/submit`, mystate)\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        const data = res.data;\n        if (data.err) {\n          // Error in user code\n          setResult(data.error);\n        } else {\n          setResult(data.output);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n\n  const onCodeChangeHandler = (newcode, e) => {\n    localStorage.setItem(\"lang\", lang);\n    localStorage.setItem(\"code\", JSON.stringify(newcode));\n\n    setCode(newcode);\n  };\n  const onInputChangeHandler = (e) => {\n    setinput(e.target.value);\n  };\n\n  const editorDidMount = (e) => {\n    console.log(\"EDITOR Loaded\");\n  };\n\n  const onLangSelectHandler = (e) => {\n    const langu = e.target.value;\n    localStorage.clear();\n    setlang(langu);\n    setCode(defaultCode.defaultCode[langu]);\n  };\n\n  const options = {\n    selectOnLineNumbers: true,\n    renderIndentGuides: true,\n    colorDecorators: true,\n    cursorBlinking: \"blink\",\n    autoClosingQuotes: \"always\",\n\n    find: {\n      autoFindInSelection: \"always\",\n    },\n    snippetSuggestions: \"always\",\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Container>\n      {loading ? (\n        <LinearProgress />\n      ) : (\n        <></>\n        // <button className=\"\" onClick={onSubmitHandler}>\n        //   Submit Code\n        // </button>\n      )}\n\n      <h1 className=\"\">Custom Code</h1>\n      <div\n        className=\"\"\n        style={{\n          display: \"flex\",\n          // flexWrap: \"wrap\",\n          justifyContent: \"space-between\",\n          flexDirection: \"row\",\n        }}\n      >\n        <div className=\"row\">\n          <div className=\"col-12 mt-5\">\n            <FormControl variant=\"outlined\" className={classes.formControl}>\n              <InputLabel id=\"demo-simple-select-outlined-label\">\n                Language\n              </InputLabel>\n              <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                value={lang}\n                onChange={(e) => onLangSelectHandler(e)}\n                label=\"Language\"\n              >\n                <MenuItem value=\"\">\n                  <em>None</em>\n                </MenuItem>\n                <MenuItem value={\"cpp\"}>C++</MenuItem>\n                <MenuItem value={\"c\"}>C</MenuItem>\n                <MenuItem value={\"python\"}>Python3</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* \n            <select id=\"lang\" onChange={(e) => onLangSelectHandler(e)}>\n              <option value=\"cpp\">C++</option>\n              <option value=\"c\">C</option>\n              <option value=\"python\">Python</option>\n            </select> */}\n\n            <div type=\"text\" id=\"code\" className=\"card shadow\">\n              <MonacoEditor\n                width=\"900\"\n                height=\"500\"\n                language={\n                  localStorage.getItem(\"lang\") != null\n                    ? localStorage.getItem(\"lang\")\n                    : lang\n                }\n                theme=\"vs-dark\"\n                value={\n                  localStorage.getItem(\"code\") != null\n                    ? JSON.parse(localStorage.getItem(\"code\"))\n                    : myCode\n                }\n                options={options}\n                onChange={onCodeChangeHandler}\n                editorDidMount={editorDidMount}\n              />\n            </div>\n          </div>\n          <div className=\"\">\n            <p className=\"lead d-block my-0\">Provide Input</p>\n\n            <textarea\n              type=\"text\"\n              id=\"input\"\n              value={input}\n              onChange={onInputChangeHandler}\n            ></textarea>\n          </div>\n\n          {loading ? (\n            <CircularProgress />\n          ) : (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={onSubmitHandler}\n            >\n              Submit\n            </Button>\n            // <button className=\"\" onClick={onSubmitHandler}>\n            //   Submit Code\n            // </button>\n          )}\n        </div>\n        <div className=\"\">\n          <h1>Output:</h1>\n          <div className=\"\">\n            {/* <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              variant=\"outlined\"\n              value={result}\n              disabled={true}\n              style={{\n                height: \"500px\",\n              }}\n            /> */}\n            <TextareaAutosize\n              style={{\n                width: \"300px\",\n              }}\n              value={result}\n              disabled={true}\n              aria-label=\"minimum height\"\n              minRows={9}\n              fullWidth\n              placeholder=\"Minimum 3 rows\"\n            />\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}